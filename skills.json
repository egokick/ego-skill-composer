{
  "Skills": [
    {
      "RepeatCount": 1,
      "SkillName": "__AgentPilotMode",
      "Description": "This skill starts the Agent Pilot mode which continuously consults the AI while accepting user input.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Start_Agent_Pilot_Mode",
          "Mode": "User",
          "Input": "Enter your initial goal for the Agent Pilot mode:",
          "SpecialAction": "AgentPilot"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "__Compose_Skill",
      "Description": "This automation skill, __Compose_Skill, dynamically generates and integrates new skills into the system by synthesizing context from existing project files and direct user input. It retrieves the current skills configuration, the program’s source code, and the available special actions (including file paths and content), then prompts the user for a detailed, step-by-step description of the desired skill functionality. Leveraging this comprehensive context, the AI generates a complete, valid JSON definition for a new skill—including precise file paths and task instructions—ensuring that only executable code is returned. The newly composed skill is then automatically added to the system’s skills configuration, enabling rapid and reliable expansion of automation capabilities.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_Skills.Json_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\skills.json",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Program.cs_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Program.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Get_SpecialActions_FilePaths",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\SpecialActions",
          "SpecialAction": "FilePathsGetByDirectory"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Get_User_Skill_Description",
          "Mode": "User",
          "Input": "Describe what you would like the skill to do. Listing numbered steps in sequence is a good strategy."
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Skills.json_Description",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\docs\\skills description.txt",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Read_File_Contents",
          "Mode": "AI",
          "Input": "I have an automation program that reads a skills.json file and uses AI. Here is the skills.json file: \n{{Output[1]}}\n{{Output[5]}}\nHere is the program.cs file: {{Output[2]}}\n\nYou are going to be asked to write a new skill that does the following things:\n{{Output[4]}}\n. Given the previous requirements, select specialActions that you might need to use. Here is the complete list of SpecialActions: {{Output[3]}}\n\nRespond only with the complete filePaths, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Get_Special_Action_File_Content",
          "Mode": "Internal",
          "Input": "{{Output[6]}}",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Create_Skill_Json",
          "Mode": "AI",
          "Input": "I have an automation program that reads a skills.json file and uses AI. Here is the skills.json file: \n{{Output[1]}}\n{{Output[5]}}\nHere is the program.cs file: {{Output[2]}}\n\nHere is the complete list of SpecialActions: {{Output[3]}}\nThe content of some specialActions: {{Output[7]}}\n\nWrite a new skill that will do the following things:\n{{Output[4]}}\nThink carefully about all of the context and references that the AI will need to be provided with, ensure you provide the relevent context to the AI, for a good example, take a look at the types of context that were provided to the AI in the skill __Compose_Skill Remember to provide context you need to create tasks in the skills.json that read in files from the project and then carefully provide that context to the AI in the prompt that you craft. Additionally, keep in mind that if you want to pass code around from the AI, you need to be explicit to the AI with instructions to only return code and nothing else, because by default the AI will include extra text that is not valid code."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Add_Skill",
          "Mode": "Internal",
          "Input": "{{Output[8]}}",
          "SpecialAction": "SkillAdd"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Upload_File_To_S3",
      "Description": "This skill uploads a file to S3 using the S3UploadFile special action.",
      "Temperature": 0.5,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_File_Path",
          "Mode": "Internal",
          "SpecialAction": "FilePathGet"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Specify_S3_Details",
          "Mode": "User",
          "Input": "Please provide the S3 bucket name, S3 bucket key, separated by commas:"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Upload_File_To_S3",
          "Mode": "Internal",
          "Input": "{{Output[2]}},{{FilePath[1]}}",
          "SpecialAction": "S3UploadFile"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "_SpecialAction_Design",
      "Description": "This skill streamlines the creation of new special actions by integrating user requirements with existing code templates and AI-driven code generation. It guides the user to provide a detailed description of the desired functionality, then collects contextual information from the existing special actions folder, the main program file, and the API handler. Using this information, the AI generates initial C# code for the new special action. The generated code is then reviewed for potential bugs and issues through an AI-powered quality check, and any identified issues are automatically addressed based on developer feedback. Finally, the user is given the opportunity to specify further modifications. This comprehensive process ensures rapid, consistent, and high-quality development of new special actions.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_User_Description",
          "Mode": "User",
          "Input": "Please describe the new special action you want to create. Be specific about its functionality:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Existing_SpecialActions",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\SpecialActions",
          "SpecialAction": "FilePathsGetByDirectory"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Read_Program.cs_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Program.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Read_Existing_SpecialActions_Code",
          "Mode": "Internal",
          "Input": "{{Output[2]}}",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Read_ApiHandler",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Api\\ApiHandler.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Generate_New_SpecialAction_Code",
          "Mode": "AI",
          "Input": "program.cs file: {{Output[3]}}\nHere is the content of the existing special actions: {{Output[4]}}\n\n. ApiHandler:{{Output[5]}}\nRequirements for a new special action:\n{{Output[1]}}\nWrite the C# code for the new special action. You may need to make some educated guesses as to the user intention."
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "review_code_for_bugs",
          "Mode": "AI",
          "Input": "Given the following requirements for a new special action:\n{{Output[1]}}\nThis was the developer code that was written {{Output[6]}}.\n\nReview the code carefully for any bugs or major issues? List the issues that you find (if any)."
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Fix_Any_Bugs",
          "Mode": "AI",
          "Input": "program.cs file: {{Output[3]}}\nHere is the content of the existing special actions: {{Output[4]}}\n\nRequirements for a new special action:\n{{Output[1]}}\nWrite the C# code for the new special action. You may need to make some educated guesses as to the user intention.\n\nAI Output: {{Output[6]}}\n\nSenior Developer Review: {{Output[7]}}\n\n Review the developers feedback and update the code to address bugs and major issues."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "placeholder",
          "Mode": "User",
          "Input": "If you would like changes to the code to be made, specify them here."
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Database_Craft_SQL_CRUD_From_File",
      "Description": "This skill automates the entire process of designing and deploying a MySQL database schema based on an input file. It begins by prompting the user to specify the file path of the document to analyze and then reads the file's content. Leveraging AI-driven insights, the skill generates an optimal database design that includes detailed table definitions—complete with appropriate columns, data types, and descriptions—to efficiently store the extracted data. It further prompts the user for the target database name and then creates comprehensive MySQL Data Definition Language (DDL) scripts. These scripts include the necessary CREATE TABLE statements (with primary keys, foreign keys, and indexes) as well as robust CRUD procedures (INSERT, UPDATE, and SAVE) that are tailored to the identified schema. The final output consists of all SQL commands ready for execution, ensuring seamless and scalable integration with a MySQL database",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_File_Path",
          "Mode": "User",
          "Input": "Please enter the complete file path of the document you want to analyze:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Read_File_Contents",
          "Mode": "Internal",
          "Input": "{{Output[1]}}",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Get_Database_Name",
          "Mode": "User",
          "Input": "Please enter the name of the database you want to use:"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Design_Database_Tables",
          "Mode": "AI",
          "Input": "You are a database architect. Analyze the following file contents and propose the most appropriate list of MySQL tables and their columns to store this data efficiently. You may suggest additional columns if you think they will be useful or likely to be needed in the future. Output your response in JSON format with 'Tables' as the root element. Each table should have a 'TableName' and 'Columns' array. Each column should have a 'ColumnName', 'DataType', and 'Description'. Here's an example of the expected format:\n\n{\n  \"Tables\": [\n    {\n      \"TableName\": \"Customers\",\n      \"Columns\": [\n        {\n          \"ColumnName\": \"CustomerId\",\n          \"DataType\": \"INT AUTO_INCREMENT PRIMARY KEY\",\n          \"Description\": \"Unique identifier for each customer\"\n        },\n        {\n          \"ColumnName\": \"FirstName\",\n          \"DataType\": \"VARCHAR(50)\",\n          \"Description\": \"Customer's first name\"\n        }\n      ]\n    }\n  ]\n}\n\nHere's the file content to analyze:\n\n{{Output[2]}}"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Generate_MySQL_Create_Statements",
          "Mode": "AI",
          "Input": "You are a MySQL database administrator. Generate MySQL CREATE TABLE statements for each table in the following JSON structure. Include appropriate primary keys, foreign keys, and indexes. The table names should be in backticks and prefixed with the database name '{{Output[3]}}' Make sure you check if the database exists and create it if not. Here's the JSON structure:\n\n{{Output[4]}}\n\nRespond ONLY with the MySQL code, nothing else. Your response will be directly executed in the database."
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Generate_MySQL_Insert_Procedures",
          "Mode": "AI",
          "Input": "You are a MySQL database administrator. Generate MySQL INSERT stored procedures for each table in the following JSON structure. The procedure names should follow the format 'TableName_Insert'. Use parameter names prefixed with 'p_'. After inserting, the procedure should return the new primary key. Here's the JSON structure:\n\n{{Output[4]}}\n\nRespond ONLY with the MySQL code, nothing else. Your response will be directly executed in the database. . Example format: \nCREATE PROCEDURE `{{Output[3]}}`.`TableName_Insert` (\n  p_Column1 DataType,\n  p_Column2 DataType\n)\nBEGIN\n  INSERT INTO `{{Output[3]}}`.`TableName` (Column1, Column2)\n  VALUES (p_Column1, p_Column2);\n  \n  SELECT LAST_INSERT_ID() AS Id;\nEND ; IT IS EXTREMELY IMPORTANT TO INCLUDE THE DATABASENAME `{{Output[3]}}` IN THE CREATE PROCEDURE STATEMENT! DON't forget!"
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Generate_MySQL_Update_Procedures",
          "Mode": "AI",
          "Input": "You are a MySQL database administrator. Generate MySQL UPDATE stored procedures for each table in the following JSON structure. The procedure names should follow the format 'TableName_Update'. Use parameter names prefixed with 'p_'. After updating, the procedure should return the updated primary key. Here's the JSON structure:\n\n{{Output[4]}}\n\nRespond ONLY with the MySQL code, nothing else. Your response will be directly executed in the database.   Example format:\n\n \nCREATE PROCEDURE `{{Output[3]}}`.`TableName_Update` (\n  p_Id INT,\n  p_Column1 DataType,\n  p_Column2 DataType\n)\nBEGIN\n  UPDATE `{{Output[3]}}`.`TableName`\n  SET Column1 = p_Column1, Column2 = p_Column2\n  WHERE Id = p_Id;\n  \n  SELECT p_Id AS Id;\nEND  ;IT IS EXTREMELY IMPORTANT TO INCLUDE THE DATABASENAME `{{Output[3]}}` IN THE UPDATE PROCEDURE STATEMENT! DON't forget!"
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Generate_MySQL_Save_Procedures",
          "Mode": "AI",
          "Input": "You are a MySQL database administrator. Generate MySQL SAVE stored procedures for each table in the following JSON structure. The SAVE procedure should insert a new record if the primary key is 0 or null, otherwise update the existing record. The procedure names should follow the format 'TableName_Save'. Use parameter names prefixed with 'p_'. After saving, the procedure should return the primary key. Here's the JSON structure:\n\n{{Output[4]}}\n\nRespond ONLY with the MySQL code, nothing else. Your response will be directly executed in the database.   Example format:\n\n nCREATE PROCEDURE `{{Output[3]}}`.`TableName_Save` (\n  p_Id INT,\n  p_Column1 DataType,\n  p_Column2 DataType\n)\nBEGIN\n  IF p_Id = 0 OR p_Id IS NULL THEN\n    INSERT INTO `{{Output[3]}}`.`TableName` (Column1, Column2)\n    VALUES (p_Column1, p_Column2);\n    SET p_Id = LAST_INSERT_ID();\n  ELSE\n    UPDATE `{{Output[3]}}`.`TableName`\n    SET Column1 = p_Column1, Column2 = p_Column2\n    WHERE Id = p_Id;\n  END IF;\n  \n  SELECT p_Id AS Id;\nEND ;IT IS EXTREMELY IMPORTANT TO INCLUDE THE DATABASENAME `{{Output[3]}}` IN THE SAVE PROCEDURE STATEMENT! DON't forget!"
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Execute_MySQL_StatementsCreate_Statements",
          "Mode": "Internal",
          "Input": "{{Output[5]}}",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 10,
          "Name": "Execute_MySQL_StatementsInsert_Procedures",
          "Mode": "Internal",
          "Input": "{{Output[6]}}",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 11,
          "Name": "Execute_MySQL_StatementsUpdate_Procedures",
          "Mode": "Internal",
          "Input": "{{Output[7]}}",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 12,
          "Name": "Execute_MySQL_StatementsSave_Procedures",
          "Mode": "Internal",
          "Input": "{{Output[8]}}",
          "SpecialAction": "DatabaseRunQuery"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Audio_Convert_Text_To_Speech_nova_female",
      "Description": "This requires you place a single text file in the data/input folder, the audio files will be placed in the data/output folder. The audio files will be numbered sequentially, each audio file contains up to 4096 characters. The audio will use the female voice 'nova'",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Set_Input_FilePath_And_Output_File_Content",
          "Mode": "Internal",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Audio_Convert_Input_Text_To_Speech",
          "Mode": "Internal",
          "Input": "{{Output[1]}}",
          "SpecialAction": "TextToSpeechnova"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Audio_Translate_Audio_To_English_Text_RealTime",
      "Description": "WIP - This lets you select a speaker device, captures the audio and converts it to english text",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Audio_Convert_Input_Audio_To_Text",
          "Mode": "Internal",
          "SpecialAction": "SpeechToTextRealTimeFromSpeaker"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Text_Ask_Database_Questions",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Ask_Database_Question",
          "Mode": "User",
          "Input": "Please type any question you have about the database and I will answer it."
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Does_Question_Require_Clarification",
          "Mode": "AI",
          "Input": "A business user has asked the following question about the database: {{Output[1]}}./n\n This question will be forwarded to a database admin who will try to answer it. Before it is forwarded to the database admin, please review the business user's question carefully. Is the question well formed and do you believe it contains enough information to be answered by the database admin? Maybe the user requires some help in forming their question. If you believe the question is well formed and contains enough information to be answered by the database admin respond only with 'Continue' NOTHING ELSE. If you believe the question requires further clarification or information, please ask the business user for this."
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Clarifying_User_Question",
          "Mode": "User",
          "Input": ":"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Get_DB_Table_List",
          "Mode": "AI",
          "Input": "You are a mysql database admin. Write mysql code to list out all of the table names with their respective database names. The mysql code should be well formatted and not contain any bugs as it will be directly executed. ONLY respond with mysql code, nothing else. Exclude default system tables and other default tables.",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Find_Relevant_Tables",
          "Mode": "AI",
          "Input": "A business user has asked the following question about the database ORIGINAL QUESTION: {{Output[1]}}/n/nCLARIFICATION: {{Output[2]}}/n/nQUESTION CLARIFICATION  {{Output[3]}}. \n\n The database admin has returned to you a list of all the database tables: {{Output[4]}}. Please respond with a list of the database names and tables that you think are most relevant to the business user question. Respond in JSON only, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Get_Table_Data",
          "Mode": "AI",
          "Input": "You are a mysql database admin. Write mysql to get 2 tablerows of data from each of the following tables {{Output[5]}}.The mysql code should be well formatted and not contain any bugs as it will be directly executed. ONLY respond with mysql code, nothing else. ",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Connect_To_Database",
          "Mode": "AI",
          "Input": "A business user has asked the following question about the database ORIGINAL QUESTION: {{Output[1]}}/n/nCLARIFICATION: {{Output[2]}}/n/nQUESTION CLARIFICATION  {{Output[3]}}. \n\n.The database admin has returned the following data that might be relevant to the business user question: {{Output[6]}}\n\n. Your job is to carefully review the data and respond with an answer to the business user's question. "
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Data_Export_Table_Schema",
      "Temperature": 0.0,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_Database_Schema",
          "Mode": "AI",
          "Input": "You are a mysql database admin. Write mysql code to list out all of the table names with their respective database names. The mysql code should be well formatted and not contain any bugs as it will be directly executed. ONLY respond with mysql code, nothing else. Exclude default system tables and other default tables.",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Table_Definition_Query",
          "Mode": "AI",
          "Input": "You are a mysql database admin. You have access to a database with the following tables: {{Output[1]}}. Write mysql statements 'SHOW CREATE TABLE {databasename}.{tablename};' for each table. ONLY respond with mysql code, nothing else.",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Format_Create_Table_SQL",
          "Mode": "AI",
          "Input": "Extract only the mysql table create statements from this text: {{Output[2]}}. ONLY respond with mysql code, nothing else. Your output will be directly executed to create the tables, so it must be valid SQL."
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Write_Mysql_Create_Table_To_Files",
          "Mode": "AI",
          "Input": "Insert the following special text\n--NEWFILE--\n Between each table create statement. At the start of each file append another special line that will be the tablename followed by .sql e.g. if the table is 'Customers', the first line in the file should be Customers.sql\n\nDo not add extra comments. Respond with the FULL and COMPLETE INPUT TEXT.\n\n INPUT TEXT: {{Output[3]}}",
          "SpecialAction": "FileWriteSplitOutput"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Data_Export_Procedure_Schema",
      "Temperature": 0.0,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_Database_Schema",
          "Mode": "AI",
          "Input": "You are a mysql database admin. Write mysql code to list out all of the stored procedure names with their respective database names. The mysql code should be well formatted and not contain any bugs as it will be directly executed. ONLY respond with mysql code, nothing else. Exclude default stored procedures.",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Procedure_Definition_Query",
          "Mode": "AI",
          "Input": "You are a mysql database admin. You have access to a database with the following stored procedures: {{Output[1]}}. Write mysql statements 'SELECT ROUTINE_DEFINITION, ROUTINE_NAME FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA' etc for each stored procedure to show the ROUTINE_DEFINITION. ONLY respond with mysql code, nothing else.",
          "SpecialAction": "DatabaseRunQuery"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Format_Create_Procedure_SQL",
          "Mode": "AI",
          "Input": "Look at the following mysql output: {{Output[2]}}. Return mysql create procedure statements for each procedure. ONLY respond with mysql code, nothing else. Your output will be directly executed to create the procedures, so it must be valid SQL."
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Write_Mysql_Create_Table_To_Files",
          "Mode": "AI",
          "Input": "Insert the following special text\n--NEWFILE--\n Between each procedure create statement. At the start of each file append another special line that will be the stored procedure name followed by .sql e.g. if the procedure name is 'Address_Delete', the first line in the file should be Address_Delete.sql\n\nDo not add extra comments. Respond with the FULL and COMPLETE INPUT TEXT.\n\n INPUT TEXT: {{Output[3]}}",
          "SpecialAction": "FileWriteSplitOutput"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Audio_Convert_Text_To_Speech_onyx_male",
      "Description": "This requires you place a single text file in the data/input folder, the audio files will be placed in the data/output folder. The audio files will be numbered sequentially, each audio file contains up to 4096 characters. The audio will use the male voice 'onyx'",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Set_Input_FilePath_And_Output_File_Content",
          "Mode": "Internal",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Audio_Convert_Input_Text_To_Speech",
          "Mode": "Internal",
          "Input": "{{Output[1]}}",
          "SpecialAction": "TextToSpeechonyx"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Audio_Convert_Audio_To_Text",
      "Description": "This requires you place a single audio or video file in the data/input folder, the text transcription file will be placed in the data/output folder. ",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Audio_Convert_Input_Audio_To_Text",
          "Mode": "Internal",
          "SpecialAction": "SpeechToTextFromFile"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Text_Mysql_DB_Table_And_CSharp_API_And_React_UI",
      "Description": "Automates the generation of a full-stack CRUD application by creating MySQL tables and stored procedures, C# backend APIs, and a React UI, all based on user-supplied table details. It delivers end-to-end code for database operations, service methods, and a dynamic front-end interface, ensuring seamless integration and strong typing.",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Ask_User_For_Table_Description",
          "Mode": "User",
          "Input": "Input database name, the table name and columns in the table:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Mysql_TableCreate",
          "Mode": "AI",
          "Input": "Generate MySQL code to delete the table if it already exists and then create a new one based on the following details: {{Output[1]}}. Ensure the database name and table name are correctly formatted using backticks, for example, for a database named 'test' and a table named 'zylon', reference it as `test`.`zylon`. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Mysql_InsertProcedure",
          "Mode": "AI",
          "Input": "Write a mysql insert procedure for this mysql table: {{Output[2]}}\n. Make sure you correctly separate the databasename and table name with ` i.e. for a database name of test and a table name of zylon you would reference it like this `test`.`zylon` \n After the row is inserted it should select the primary key that was inserted. Name the procedure {tablename}_Insert, the input parameters should be prefixed with \"p_\" for example an input parameter for \"PhoneNumber\" should be named \"p_PhoneNumber\" in the stored procedure. If the procedure already exists, drop it first then recreate it. Ensure you use the DELIMITER $$ \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Mysql_UpdateProcedure",
          "Mode": "AI",
          "Input": "Create a mysql update procedure for this mysql table: {{Output[2]}}\nMake sure you correctly separate the databasename and table name with ` i.e. for a database name of test and a table name of zylon you would reference it like this `test`.`zylon` \n After the row is updated it should select the primary key that was updated. Name the procedure {tablename}_Update, the input parameters should be prefixed with \"p_\" for example an input parameter for \"PhoneNumber\" should be named \"p_PhoneNumber\" in the stored procedure. If the procedure already exists, drop it first then recreate it. Ensure you use the DELIMITER $$ \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Mysql_SaveProcedure",
          "Mode": "AI",
          "Input": "Create a mysql save procedure for this mysql table: {{Output[2]}} Make sure you correctly separate the databasename and table name with ` i.e. for a database name of test and a table name of zylon you would reference it like this `test`.`zylon` \n it should check if the primary key for the table is greater than zero, if it is then call this update proc {{Output[3]}} else it should call this insert proc {{Output[4]}}\nName the procedure {tablename}_Save, the input parameters should be prefixed with \"p_\" for example an input parameter for \"PhoneNumber\" should be named \"p_PhoneNumber\" in the stored procedure. If the procedure already exists, drop it first then recreate it. Ensure you use the DELIMITER $$ \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Mysql_GetProcedure",
          "Mode": "AI",
          "Input": "Create a mysql get procedure for this mysql table: {{Output[2]}} it should get all the data for the table, it should have input parameters that can be 0 or an empty string or '0001-01-01 00:00:00' for date fields, if the input parameter is 0 or an empty string or '0001-01-01 00:00:00' it will not filter the table data on that parameter, if the input parameters are passed in and have a value, it will be used in the where statement to filter the returned data.\nName the procedure {tablename}_Get, the input parameters should be prefixed with \"p_\" for example an input parameter for \"PhoneNumber\" should be named \"p_PhoneNumber\" in the stored procedure. For date fields with a value you should make the filter greater than or equal to, so that a date range can be provided, example 1: `StartDate` >= p_StartDate, example 2: `EndDate` <= p_EndDate \n\n Make sure you correctly separate the databasename and table name with a backtick ` i.e. for a database name of test and a table name of zylon you would reference it like this `test`.`zylon` \n If the procedure already exists, drop it first then recreate it. Ensure you use the DELIMITER $$ \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "CSharp_Class",
          "Mode": "AI",
          "Input": "Create a C# POCO class for this mysql table: {{Output[2]}}\n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "CSharp_SaveService",
          "Mode": "AI",
          "Input": "In a similar style to the following C# code public async Task<Zylon> SaveZylon(Zylon zylon)        {            var parameters = _databaseService.GetParameters(zylon);            var dt = await _databaseService.ExecuteCommand(\"secretary.Zylon_Save\", parameters);            if (dt?.Rows == null || dt.Rows.Count <= 0) return null;            zylon.ServiceId = _databaseService.GetInteger(dt.Rows[0], \"ZylonId\");            return zylon;        }\n create a new c# method to call this database procedure {{Output[5]}} for this C# class {{Output[7]}}. The save service should return the primary key of the table data that was saved, or null if it failed to save correctly. The method signature for the ExecuteCommand is this public async Task<DataTable> ExecuteCommand(string storedProcedure, Dictionary<string, string> parameters, int timeout = 10)\n. Ensure you include the database name in the execute command\n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "CSharp_GetService",
          "Mode": "AI",
          "Input": "In a similar style to the following C# methods\n\n public async Task<IList<BusinessHour>> GetBusinessHour(int businessId)       {\"p_BusinessId\", businessId.ToString() } };           var dt = await _databaseService.ExecuteCommand(\"secretary.BusinessHour_GetByBusinessId\", parameters);           if (dt?.Rows == null || (dt.Rows.Count <= 0)) return null;           var businessHours = PropertyMapper.ConvertTo<BusinessHour>(dt.Rows);           return businessHours;       }\n\n         public async Task<ServiceBooking> SaveServiceBooking(ServiceBooking serviceBooking)\n        {\n            var parameters = _databaseService.GetParameters(serviceBooking);\n            var dt = await _databaseService.ExecuteCommand(\"secretary.ServiceBooking_Save\", parameters);\n\n            if (dt?.Rows == null || dt.Rows.Count <= 0) return null;\n\n            serviceBooking.BookingId = _databaseService.GetInteger(dt.Rows[0], \"BookingId\");\n            return serviceBooking;\n        }\n\n create a new c# method to call this database procedure {{Output[6]}}, it will return data in the shape of this C# class {{Output[7]}}.  The method signature for the ExecuteCommand is this:\n\n public async Task<DataTable> ExecuteCommand(string storedProcedure, Dictionary<string, string> parameters, int timeout = 10)\n The GetParameters method is this\n\n public Dictionary<string, string> GetParameters<T>(T obj) \n        {\n            var parameters = obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).ToDictionary(prop => $\"p_{prop.Name}\", prop => GetValue(obj, prop));\n\nreturn parameters;\n        }. There can be more than 1 table row returned by the stored proc, so handle this in the C# method. Given that null values cannot be passed to the ExecuteCommand, make sure you default any null values. Ensure you include the database name in the execute command. \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 10,
          "Name": "Mysql_DeleteProcedure",
          "Mode": "AI",
          "Input": "If the procedure already exists, drop it. Create a mysql delete procedure for this mysql table: {{Output[2]}}\nIt should take the primary key of the table as an input parameter, the input parameters should be prefixed with \"p_\" for example an input parameter for \"PhoneNumber\" should be named \"p_PhoneNumber\" in the stored procedure. If the row is successfully deleted it should return true, else it should return false. Name the procedure {tablename}_Delete. Keep the procedure simple, do not use transactions. Ensure you use the DELIMITER $$ \n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 11,
          "Name": "CSharp_DeleteService",
          "Mode": "AI",
          "Input": "In a similar style to the following C# code /// <inheritdoc /> \n    public async Task<string> DeleteAddress(int addressId)\n     {         var parameters = new Dictionary<string, string> { { \"p_AddressId\", addressId.ToString() } };\n         var dt = await _databaseService.ExecuteCommand(\"secretary.Address_Delete\", parameters); \n\n         if (dt is not { Rows.Count: > 0 }) return null;\n\n         var result = _databaseService.GetInteger(dt.Rows[0], \"AddressId\");\n         return result.ToString();\n     }\n create a new c# method to call this database procedure {{Output[10]}}, it will return true if successfull. The C# model is {{Output[7]}}, only the primary key will be passed for the delete proc.\n  The method signature for the ExecuteCommand is this public async Task<DataTable> ExecuteCommand(string storedProcedure, Dictionary<string, string> parameters, int timeout = 10)\n. Ensure you include the database name in the execute command\n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 12,
          "Name": "CSharp_Service_Full_Class",
          "Mode": "AI",
          "Input": "Combine the following C# methods {{Output[8]}} \n {{Output[9]}} \n {{Output[11]}} to create a full C# class with a constructor in a similar style to this C# service:     public class KnowledgeService : IKnowledgeService    {        private readonly IDatabaseService _databaseService;        /// <summary>        /// Default constructor.        /// </summary>        /// <param name=\"databaseService\"></param>        public KnowledgeService(IDatabaseService databaseService)        {            _databaseService = databaseService;        }  \nEnsure you use this C# class {{Output[7]}}\n\n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 13,
          "Name": "CSharp_API_Controller",
          "Mode": "AI",
          "Input": "Given these C# classes {{Output[12]}} {{Output[7]}} \n create a C# controller that calls all of the service methods, ensure you do not use [FromBody]. Create it in a similar style to this C# controller: namespace Secretary.Controllers \n{\n    /// <summary>\n    /// Manages Business\nInformation.\n    /// </summary>\n    [Route(\"secretaryapi/[controller]/[action]\")]\n    [ApiController]\n    public class\nBusinessController : ControllerBase\n    {\nprivate readonly IBusinessService _businessService;\n        /// <summary>\n        ///\nDefault Constructor.\n        /// </summary>\n        /// <param name=\"businessService\"></param>\n        public\nBusinessController(IBusinessService businessService)\n        {\n            _businessService = businessService;\n        }\n\n        /// <summary>\n        /// GetServices.\n        /// </summary>\n        /// <param name=\"businessId\"></param>\n        /// <returns></returns>\n        [HttpGet]\n        [ActionName(\"GetServices\")]\n        public async Task<ActionResult<IList<Service>>>\nGetServices(int businessId)\n        {\n            var services = await _businessService.GetServicesByBusinessId(businessId);\n            if (services == null || services.Count == 0)\n                return NotFound(\"No services found for the given business ID.\");\n\n            return Ok(services);\n        }\n\n        /// <summary>\n        /// Saves a business record.\n        /// </summary>\n        /// <param name=\"business\"></param>\n        /// <returns></returns>\n        [HttpPost]\n        [ActionName(\"SaveBusiness\")]\n        public async\nTask<ActionResult<Business>> SaveBusiness(Business business)\n        {\n            business = await _businessService.SaveBusiness(business);\n            return business == null ? Problem(\"Failed to save business\") : Ok(business);\n        }. Make sure you explicitly use the ActionName in the controller methods you create. The get method should be flexible such that it can be called with no parameters or only a single parameter or multiple parameters. \n\n ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 14,
          "Name": "React_GetMethod",
          "Mode": "AI",
          "Input": "Create a user interface table in typescript React \"^18.2.0\". The react code will have a button to call the get method in the following C# API, it will then display the data in the UI table, the get method can return no data or it can return multiple rows. \n This is the C# class that describes each column in the table {{Output[7]}}\n. This is the C# api it will call {{Output[13]}}\n \n The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). The base url is: https:\\//localhost:44372 Keep all the code in a single page. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 15,
          "Name": "React_SaveMethod",
          "Mode": "AI",
          "Input": "Given the following typescript React \"^18.2.0\" code, modify the react code so that after the data has been loaded into the table, you can edit each row in the table and save it by calling the save method in the following api. Here is the existing react code: {{Output[14]}} here is the api with the save method:  {{Output[13]}}, here are the C# class properties for the table columns:  {{Output[7]}} \n.The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Keep all the code in a single page. Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). The base url is: https:\\//localhost:44372 ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 16,
          "Name": "React_DeleteMethod",
          "Mode": "AI",
          "Input": "Given the following typescript React \"^18.2.0\" code, modify the react code so that after the data has been loaded into the table, you can click a button next to each row in the table to delete that row, this will call the delete method in the api listed below. Here is the existing react code: {{Output[14]}} here is the api with the delete method:  {{Output[13]}}, here are the C# class properties for the table columns:  {{Output[7]}} \n.The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Keep all the code in a single page. Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`).The base url is: https:\\//localhost:44372. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 17,
          "Name": "React_FilterTableColumns",
          "Mode": "AI",
          "Input": "In the typescript React \"^18.2.0\" code, modify the existing table header columns so that they are input fields that will filter each column on the text you input. The existing get request will behave the same on page load. After filtering the table column, a get request to the same endpoint will be made, passing the query parameters from the table column filters, use the properties in the existing typescript interface. Ensure the get request is called automatically upon the filter change, you may need to useEffect hook to listen for changes with a 500ms setTimeout. When the get request correctly returns a 404, the table should update and display no records, i.e. the table should be empty when the get request returns a 404 status code. This is the code to modify: {{Output[14]}}. IT IS VITAL THAT YOU INCLUDE ALL EXISTING FUNCTIONALITY, DO NOT BREAK ANYTHING THAT CURRENTLY WORKS. Keep all the code in a single page. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 18,
          "Name": "React_InsertMethod",
          "Mode": "AI",
          "Input": "Create a user interface form in typescript React \"^18.2.0\". The react code will have a button to call the save method in this C# API {{Output[13]}}.\n\n The C# class is {{Output[7]}}\n\n The primary key will be 0.\n The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). The base url is: https:\\//localhost:44372. Keep all the code in a single page. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 19,
          "Name": "React_CombineMethods",
          "Mode": "AI",
          "Input": "Listed below are 5 typescript React \"^18.2.0\" files written by different software engineers to interact with the same API. Examine them closely and understand how each of the GET, SAVE, DELETE, FILTER and INSERT features are implemented. Produce a new react file that #1 loads the table data. #2 allows you to edit each row in the table and save the table row. #3 Allows you to delete a table row. #4 Allows you to filter the table columns. #5 Allows you to save/insert a new record. Here are the 5 different react files that I want you to examine: get data file #1: {{Output[14]}} save data file #2: {{Output[15]}} delete data file #3: {{Output[16]}}\n filter data file #4: {{Output[17]}}\n insert data file #5: {{Output[18]}}. Keep all the code in a single page, The base url is: https:\\//localhost:44372. Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). Avoid using new libraries. Ensure everything is strongly typed for typescript. IT IS EXTEREMELY IMPORTANT THAT YOU INCLUDE ALL EXISTING FUNCTIONALITY, DO NOT BREAK ANYTHING THAT CURRENTLY WORKS. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 20,
          "Name": "Mysql_SaveTest",
          "Mode": "AI",
          "Input": "Given this mysql save procedure {{Output[5]}} Create 3 mysql calls to the procedure with mock data, use a primary key of 0 so that new data is inserted.\n ONLY respond with code, nothing else, $200 tip."
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Text_CSharp_Controller_And_Class_To_React_UI",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Ask_User_For_ControllerMethod",
          "Mode": "User",
          "Input": "Copy and paste the C# api get and save methods. Include the controller name and route:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Ask_User_For_CSharp_Class",
          "Mode": "User",
          "Input": "Copy and paste the C# Class properties if there is a custom class in the controller method:"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "React_GetMethod",
          "Mode": "AI",
          "Input": "Create a user interface table in typescript React \"^18.2.0\". The react code will have a button to call the get method in the following C# API, it will then display the data in the UI table, the get method can return no data or it can return multiple rows. \n This is the C# class that describes each column in the table {{Output[2]}}\n. This is the C# api it will call {{Output[1]}}\n \n The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). The base url is: https:\\//localhost:44372 Keep all the code in a single page. ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "React_SaveMethod",
          "Mode": "AI",
          "Input": "Given the following typescript React \"^18.2.0\" code, modify the react code so that after the data has been loaded into the table, you can edit each row in the table and save it by calling the save method in the following api. Here is the existing react code: {{Output[3]}} here is the api with the save method:  {{Output[1]}}, here are the C# class properties for the table columns:  {{Output[2]}} \n.The URL/api endpoint should conform to the route in the api i.e. [Route(\"secretaryapi/[controller]/[action]\")] \n Keep all the code in a single page. Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). The base url is: https:\\//localhost:44372 ONLY respond with code, nothing else, $200 tip."
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "React_CombineMethods",
          "Mode": "AI",
          "Input": "Listed below are 2 typescript React \"^18.2.0\" files written by different software engineers to interact with the same API. Examine them closely and understand how each of the GET and SAVE features are implemented. Produce a new react file that #1 loads the table data. #2 allows you to edit each row in the table and save the table row. #3 Allows you to save/insert a new record. get data file #1: {{Output[3]}} save data file #2: {{Output[4]}}. Keep all the code in a single page, The base url is: https:\\//localhost:44372. Use the datatype string for date fields, ensure the TypeScript interface uses camelCase e.g. (`phoneCallId`). Avoid using new libraries. Ensure everything is strongly typed for typescript. IT IS EXTEREMELY IMPORTANT THAT YOU INCLUDE ALL EXISTING FUNCTIONALITY, DO NOT BREAK ANYTHING THAT CURRENTLY WORKS. ONLY respond with code, nothing else, $200 tip."
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Text_Quick_Test",
      "OpenAiModel": "gpt-4-0125-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Ask_User_For_Table_Description",
          "Mode": "User",
          "Input": "Input database name, the table name and columns in the table:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Mysql_InsertProcedure",
          "Mode": "AI",
          "Input": "Generate MySQL code to delete the table if it already exists and then create a new one based on the following details: {{Output[1]}}. Ensure the database name and table name are correctly formatted using backticks, for example, for a database named 'test' and a table named 'zylon', reference it as `test`.`zylon`. ONLY respond with code, nothing else, $200 tip."
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Text_Merge_Labels",
      "OpenAiModel": "gpt-4-0125-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "GetLabels",
          "Mode": "User",
          "Input": "Input a list of labels:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Label_Merge",
          "Mode": "AI",
          "Input": "Review these labels and group them by which fall under a similar category, explain why. If one of the labels might be a feature name of a product, keep this as a distinct category: {{Output[1]}}."
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Label_Merge",
          "Mode": "AI",
          "Input": "The following text contains some pre amble and then a list of categories and sub categories. Extract only the categories from the response and respond with nothing else. BEGIN TEXT: {{Output[2]}}\nEND TEXT."
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 2147483647,
      "SkillName": "DataInput_Label_Text",
      "OpenAiModel": "gpt-4-0125-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Data_GetDefinedLabels",
          "Mode": "User",
          "Input": "Type . for default mode. Files are read from the data/input folder and moved to the into the data/output folder. Are there known labels you would like the AI to use for this data, provide a comma separated list:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Data_GetLabellingMode",
          "Mode": "User",
          "Input": "Type . for default labelling mode. For exclusive mode, copy and paste this text: <= ONLY OUTPUT LABELS THAT ARE IN THIS LIST, IF NO APPROPRIATE LABEL APPLIES TO THE TEXT, OUTPUT LABEL AS 'UNKNOWN'"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Data_GetAdditionalInfo",
          "Mode": "User",
          "Input": "Is there any additional context that you want to give the AI that may assist with labelling? Warning this can negatively impact the labelling so be succint and accurate. Type . if not"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Set_Input_FilePath_And_Output_File_Content",
          "Mode": "Internal",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Output_Labels_For_File",
          "Mode": "AI",
          "Input": "Read the following text information and output one or more high level, comma separated labels. ONLY OUTPUT A MAXIMUM OF 4 LABELS, PICK THE MOST IMPORTANT LABELS ONLY. Names of features are important {{Output[3]}}. The title may be a useful indicator. Labels: {{Output[1]}} {{Output[2]}}\n START OF FILE TO LABEL: {{Output[4]}}\n\n END OF FILE.\n Respond with the labels in alphabetical order. Do not put any special characters in the labels, use alphanumeric labels only. ONLY respond with labels, nothing else, $200 tip."
        },
        {
          "FilePath": "{{FilePath[4]}}",
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Data_AILabel",
          "Mode": "Internal",
          "Input": "{{Output[5]}}",
          "SpecialAction": "RenameFile"
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Data_AILabel",
          "Mode": "Internal",
          "Input": "{{FilePath[6]}}",
          "SpecialAction": "FileMoveToOutput"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": true
    },
    {
      "RepeatCount": 1,
      "SkillName": "DataInput_Label_Images",
      "OpenAiModel": "gpt-4-vision-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Data_GetDefinedLabels",
          "Input": "NOT IMPLEMENTED YET WORK IN PROGRESS PLEASE IGNORE Type . for default mode. Files are read from the data/input folder and moved to the into the data/output folder. Are there known labels you would like the AI to use for this data, provide a comma separated list:"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Email_Demo_Download_And_Evaluate",
      "Description": "Demo of downloading email, reading them, checking if they contain a monetary value, writing that out in a standard format.",
      "OpenAiModel": "gpt-4o",
      "Temperature": 0.5,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Downloads Emails From The Pending folder",
          "Mode": "Internal",
          "Input": "Pending->Processed",
          "SpecialAction": "EmailDownloadFromFolder"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Waits for 2 seconds and then resumes processing.",
          "Mode": "Internal",
          "Input": "10",
          "SpecialAction": "DelayInSeconds"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "QR_Code_Email_Demo",
      "Description": "Create QR code and email. We first ask the user for an email address in the console, a subject line and the content of the email, we use this data to craft a custom QR code containing a mailto link with this email information. Then, using a 'hard coded' email address (in this skill definition) we embed the QR code into the body of an email and send it.",
      "OpenAiModel": "gpt-4o",
      "Temperature": 0.5,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get email to address",
          "Mode": "User",
          "Input": "Enter the email address you want to mail:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get email subject",
          "Mode": "User",
          "Input": "Enter the email subject line:"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Get email body content",
          "Mode": "User",
          "Input": "Enter the body content of the email"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Format QR code mailto",
          "Mode": "Internal",
          "Input": "mailto:{{Output[1]}}?subject={{Output[2]}}&body={{Output[3]}}",
          "SpecialAction": "CopyInputToOutput"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Create the QR code from the previous input. Saves the QR code as a PNG and sets the FilePath.",
          "Mode": "Internal",
          "Input": "{{Output[4]}}",
          "SpecialAction": "QRCodeCreate"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Email the QR code",
          "Mode": "Internal",
          "Input": "to:egokick@gmail.com;tomcadesign@gmail.com\ncc:tom.cadesign@gmail.com\nsubject:you did great!\nbody:<html><body><p>Your Results:</p><img src='{{Output[5]}}' alt='Embedded Image'/></body></html>",
          "SpecialAction": "EmailSend"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 5,
      "SkillName": "Email_Demo_Download_Evaluate_And_Send_Email",
      "Description": "Demo of downloading email, reading them, checking if they contain a monetary value, writing that out in a standard format.",
      "OpenAiModel": "gpt-4o",
      "Temperature": 0.5,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Download an Email From The Pending folder",
          "Mode": "Internal",
          "Input": "Pending->Processed",
          "SpecialAction": "EmailDownloadFromFolder"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get the email content and load it into the task.Output variable",
          "Mode": "Internal",
          "Input": "{{FilePath[1]}}",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Does this email content contain money?",
          "Mode": "AI",
          "Input": "If the content of this email has monetary amounts, simply output the text: 'true'. else output the text 'false'. Nothing else. Email content: {{Output[2]}}"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Does this email content discuss politics?",
          "Mode": "AI",
          "Input": "If the content of this email has content talking about politics, simply output the text: 'true'. Else output the text 'false'. Nothing else. Email content: {{Output[2]}}"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "What is the language of this email?",
          "Mode": "AI",
          "Input": "What is the language of the email written in? i.e. English, Chinese, Spanish? ONLY output the language as a response, Nothing else. Email content: {{Output[2]}}"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "What is this email about?",
          "Mode": "AI",
          "Input": "Generate a really short Label explaining what this email is about, 3 words MAXIMUM, in ENGLISH ONLY, Nothing else. Do not use any punctuation, periods or full stops. Email content: {{Output[2]}}"
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Format email evaluation output and write to file.",
          "Mode": "Internal",
          "Input": "--{{Output[6]}}.txt--\nTopic: {{Output[6]}}\nContains Money: {{Output[3]}}\nPolitical: {{Output[4]}}\nLanguange: {{Output[5]}}",
          "SpecialAction": "FileWriteInput"
        },
        {
          "FilePath": "{{FilePath[7]}}",
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Send email with evaluated output",
          "Mode": "Internal",
          "Input": "to:tomcadesign@gmail.com\nsubject:{{Output[6]}}\nbody:\nContains Money: {{Output[3]}}\nPolitical: {{Output[4]}}\nLanguange: {{Output[5]}}",
          "SpecialAction": "EmailSend"
        },
        {
          "FilePath": "{{FilePath[1]}}",
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Move_Downloaded_Email_To_Output_Folder",
          "Mode": "Internal",
          "SpecialAction": "FileMoveToOutput"
        },
        {
          "HaltProcessing": false,
          "Number": 10,
          "Name": "Example of polling, waits for 10 seconds and then gets the next email.",
          "Mode": "Internal",
          "Input": "10",
          "SpecialAction": "DelayInSeconds"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "DataInput_BOOK_TRANSLATION_to_audio!!!!!!!!!!!!!!!!!",
      "Description": "Runs the following skills: ",
      "OpenAiModel": "gpt-4o",
      "Temperature": 0.5,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Runs skill: DataInput_BOOK_TRANSLATION_Convert_Images_To_Text",
          "Mode": "Internal",
          "Input": "DataInput_BOOK_TRANSLATION_Convert_Images_To_Text",
          "SpecialAction": "SkillRun"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Waits for 2 seconds and then resumes processing.",
          "Mode": "Internal",
          "Input": "2",
          "SpecialAction": "DelayInSeconds"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Runs skill: DataInput_BOOK_TRANSLATION_Convert_Text_To_Audio",
          "Mode": "Internal",
          "Input": "DataInput_BOOK_TRANSLATION_Convert_Text_To_Audio",
          "SpecialAction": "SkillRun"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "DataOutput_MoveFilesToInput",
      "OpenAiModel": "gpt-4-0125-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Data_MoveOutputFilesToInputFolder",
          "Mode": "Internal",
          "SpecialAction": "FilesMoveToInputFolder"
        }
      ],
      "DisableFileLogging": true,
      "AppendFileLogging": true
    },
    {
      "RepeatCount": 1,
      "SkillName": "DataInput_ConcatenateInputFilesByLabel",
      "OpenAiModel": "gpt-4-0125-preview",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Data_MoveOutputFilesToInputFolder",
          "Mode": "Internal",
          "SpecialAction": "GetUniqueLabelsFromInputFiles"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Data_MoveOutputFilesToInputFolder",
          "Mode": "Internal",
          "Input": "{{Output[1]}}",
          "SpecialAction": "ConcatenateFilesByLabel"
        }
      ],
      "DisableFileLogging": true,
      "AppendFileLogging": true
    },
    {
      "RepeatCount": 1,
      "SkillName": "Download_Webpage_Content",
      "Description": "This skill takes a URL input from the user and downloads the webpage content.",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_User_Url_Input",
          "Mode": "User",
          "Input": "Please enter the URL of the webpage you want to download:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Download_Webpage_Content",
          "Mode": "Internal",
          "Input": "{{Output[1]}}",
          "SpecialAction": "WebUrlDownload"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Save_Downloaded_Content",
          "Mode": "Internal",
          "Input": "{{Output[2]}}",
          "SpecialAction": "FileWriteOutput"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "_SpecialAction_Add",
      "Description": "Creates a new special action based on user description and existing code templates.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_User_Description",
          "Mode": "User",
          "Input": "Please describe the new special action you want to create. Be specific about its functionality:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Existing_SpecialActions",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\SpecialActions",
          "SpecialAction": "FilePathsGetByDirectory"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Read_Program.cs_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Program.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Read_Existing_SpecialActions_Code",
          "Mode": "Internal",
          "Input": "{{Output[2]}}",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Read_ApiHandler",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Api\\ApiHandler.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Generate_New_SpecialAction_Code",
          "Mode": "AI",
          "Input": "program.cs file: {{Output[3]}}\nHere is the content of the existing special actions: {{Output[4]}}\n\nApiHandler: {{Output[5]}}\nRequirements for a new special action:\n{{Output[1]}}\n\nWrite the C# code for the new special action. Keep in mind that all codepaths in the SpecialAction must return the task. Respond only with the valid C# code, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Review_Code_For_Bugs",
          "Mode": "AI",
          "Input": "Given the following requirements for a new special action:\n{{Output[1]}}\nThis was the developer code that was written:\n{{Output[6]}}.\n\nReview the code carefully for any bugs or major issues. List the issues that you find (if any). Respond only with the issues, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Fix_Any_Bugs",
          "Mode": "AI",
          "Input": "program.cs file: {{Output[3]}}\nHere is the content of the existing special actions: {{Output[4]}}\n\nRequirements for a new special action:\n{{Output[1]}}\n\nAI Output: {{Output[6]}}\n\nDeveloper Review: {{Output[7]}}\n\nReview the developer's feedback and update the code to address bugs and major issues. All special actions should have exactly the same method signature: public async Task<Models.Task> Execute(Models.Task task, Skill selectedSkill)\n\nRespond only with the updated C# code, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Add_SpecialAction",
          "Mode": "Internal",
          "Input": "{{Output[8]}}",
          "SpecialAction": "SpecialActionAdd"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "_SkillUpdate",
      "Description": "This skill provides an end-to-end automated workflow for dynamically updating an existing skill based on detailed user instructions. The process begins by prompting the user to describe the desired changes. It then extracts the exact skill name (preserving any underscores), retrieves the current skill definition, and gathers contextual code from special actions, the main program, and the skills repository. Using this comprehensive context, the AI generates an updated version of the skill code. The updated code is subsequently reviewed and critiqued by the AI for potential improvements, and then refined accordingly. Finally, the refined code is applied to update the existing skill. This iterative process ensures precise, context-aware modifications that align closely with the user's requirements.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_User_Description",
          "Mode": "User",
          "Input": "Please describe the skill you want to update and the changes you want to make:"
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Extract_SkillName",
          "Mode": "AI",
          "Input": "A user wants to update a skill. Their input is: {{Output[1]}}.\n\nWe want to:\n1) EXTRACT ONLY the skill name EXACTLY as it appears (verbatim).\n2) If the skill name has underscores (_) or double underscores (__), preserve them EXACTLY as they appear.\n3) Output the skill name on a single line, with NOTHING ELSE (no punctuation, no quotes, no extra text).\n\nBelow are examples showing input -> output (output on a single line):\n\n1) Input: \"Please update my skill to _leadingUnderscoreSkill\"  \n   Output: _leadingUnderscoreSkill\n\n2) Input: \"I want to update my skill to __doubleLeadingUnderscore\"  \n   Output: __doubleLeadingUnderscore\n\n3) Input: \"Update skill: skillWithEnding_\"  \n   Output: skillWithEnding_\n\n4) Input: \"Update skill: __skill_\"  \n   Output: __skill_\n\n5) Input: \"Change skill to _my__skill_\"  \n   Output: _my__skill_\n\n6) Input: \"Set skill to _some__skillWith__multiple___underscores_\"  \n   Output: _some__skillWith__multiple___underscores_\n\n7) Input: \"Skill is skillNoUnderscores\"  \n   Output: skillNoUnderscores\n\nReturn only the skill name. No extra punctuation, no quotes, no additional text."
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Retrieve_Existing_Skill",
          "Mode": "Internal",
          "Input": "{{Output[2]}}",
          "SpecialAction": "SkillGetByName"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Read_SpecialActions_Code",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\SpecialActions",
          "SpecialAction": "FilePathsGetByDirectory"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Read_Program_Code",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Program.cs",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Read_SpecialActions_Content",
          "Mode": "Internal",
          "Input": "{{Output[4]}}",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Read_Skills_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\skills.json",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Update_Skill_Code",
          "Mode": "AI",
          "Input": "Here is the existing skill that needs to be updated: {{Output[3]}}. The user requested the following changes: {{Output[1]}}. Here is the context of all special actions: {{Output[6]}}. Here is the context of the program.cs file: {{Output[5]}}. Here is the context of the skills.json file: {{Output[7]}}. Using this context, make the requested changes to the skill. Return only the updated skill code, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Review_Updated_Skill",
          "Mode": "AI",
          "Input": "Here is the updated skill code: {{Output[8]}}. Review this code for any potential issues or improvements. Provide a critique, but respond only with the critique, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 10,
          "Name": "Refine_Skill_Code",
          "Mode": "AI",
          "Input": "Based on the following critique: {{Output[9]}}, refine the updated skill code. Here is the context of the existing skill: {{Output[3]}}, user changes: {{Output[1]}}, and special actions: {{Output[6]}}. Return only the refined skill code as json, nothing else."
        },
        {
          "HaltProcessing": false,
          "Number": 11,
          "Name": "Apply_Skill_Update",
          "Mode": "Internal",
          "Input": "{{Output[10]}}",
          "SpecialAction": "SkillUpdate"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "__Compose_Skill_And_Actions",
      "Description": "This skill provides an interactive, guided process for composing a new skill along with any required special actions. It starts by prompting the user to describe the desired functionality in detail, encouraging a structured, step-by-step outline. The skill then reads the existing special actions and source files to gather context and determine what additional special actions may be required. Using AI, it breaks down the high-level description into detailed implementation steps, verifies the availability of required actions, and—if necessary—automatically generates the C# code for new special actions. Finally, it designs the new skill as a JSON object and adds it to the system, effectively streamlining the process of extending the platform's capabilities.",
      "Temperature": 0.7,
      "Tasks": [
        {
          "HaltProcessing": false,
          "Number": 1,
          "Name": "Get_User_Skill_Description",
          "Mode": "User",
          "Input": "Describe what you want the new skill to do. Listing numbered steps in sequence is a good strategy."
        },
        {
          "HaltProcessing": false,
          "Number": 2,
          "Name": "Get_Existing_SpecialActions_FilePaths",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\SpecialActions",
          "SpecialAction": "FilePathsGetByDirectory"
        },
        {
          "HaltProcessing": false,
          "Number": 3,
          "Name": "Read_Existing_SpecialActions",
          "Mode": "Internal",
          "Input": "{{Output[2]}}",
          "SpecialAction": "FilesRead"
        },
        {
          "HaltProcessing": false,
          "Number": 4,
          "Name": "Read_Program.cs_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\Program.cs",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 5,
          "Name": "Read_Skills.json_File",
          "Mode": "Internal",
          "Input": "C:\\source\\ego-skill-composer\\skills.json",
          "SpecialAction": "FileRead"
        },
        {
          "HaltProcessing": false,
          "Number": 6,
          "Name": "Get_High_Level_Steps",
          "Mode": "AI",
          "Input": "Using the description provided by the user: {{Output[1]}}, list the high-level steps required to perform the skill."
        },
        {
          "HaltProcessing": false,
          "Number": 7,
          "Name": "Check_SpecialActions_Needed",
          "Mode": "AI",
          "Input": "Given the high-level steps: {{Output[6]}}, do you have all the necessary special actions from the following list: {{Output[3]}} to accomplish the task? If not, list the names of the new special actions needed. You will also need the skills.json file: {{Output[5]}} and the original user description: {{Output[1]}}."
        },
        {
          "HaltProcessing": false,
          "Number": 8,
          "Name": "Create_New_SpecialAction_Code",
          "Mode": "AI",
          "Input": "If new special actions are required, write the C# code for each of them. Base your code on the context of the existing Program.cs: {{Output[4]}}, and ensure to return code only."
        },
        {
          "HaltProcessing": false,
          "Number": 9,
          "Name": "Add_New_SpecialActions",
          "Mode": "Internal",
          "Input": "{{Output[8]}}",
          "SpecialAction": "SpecialActionAdd"
        },
        {
          "HaltProcessing": false,
          "Number": 10,
          "Name": "Design_New_Skill",
          "Mode": "AI",
          "Input": "Design the new skill using the description: {{Output[1]}}, existing skills: {{Output[5]}}, and newly created special actions. Provide the skill as JSON, and ensure to return JSON code only."
        },
        {
          "HaltProcessing": false,
          "Number": 11,
          "Name": "Add_New_Skill",
          "Mode": "Internal",
          "Input": "{{Output[10]}}",
          "SpecialAction": "SkillAdd"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    },
    {
      "RepeatCount": 1,
      "SkillName": "Search_Cat_Pictures",
      "Description": "This skill opens a browser and searches for cat pictures.",
      "Temperature": 0.1,
      "Tasks": [
        {
          "HaltProcessing": true,
          "Number": 1,
          "Name": "Launch_Browser",
          "Mode": "Internal",
          "SpecialAction": "BrowserOpen"
        },
        {
          "HaltProcessing": true,
          "Number": 2,
          "Name": "Navigate_To_Search_Engine",
          "Mode": "Internal",
          "Input": "https://www.google.com",
          "SpecialAction": "BrowserNavigate"
        },
        {
          "HaltProcessing": true,
          "Number": 3,
          "Name": "Enter_Search_Query",
          "Mode": "Internal",
          "Input": "cat pictures",
          "SpecialAction": "BrowserType"
        }
      ],
      "DisableFileLogging": false,
      "AppendFileLogging": false
    }
  ]
}